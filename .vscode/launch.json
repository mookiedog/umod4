// At the moment, debugging is all messed up due to this bug:
// https://github.com/microsoft/vscode-cmake-tools/issues/1485
//
// In short, cmake will not find any executables that are added as subprojects.
// It makes it impossible to select a target and debug it in the normal fashion.

{
  // Use IntelliSense to learn about possible attributes.
  // Hover to view descriptions of existing attributes.
  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
  "version": "0.2.0",
  "configurations": [
    {
        // This config is here until a VSCode/CMake bug is fixed that allows executables to be found in
        // external projects. Right now, the only way to launch a debug session is to specify the location of
        // the executable file explicitly, as below.
        // Info on the bug is here: https://github.com/microsoft/vscode-cmake-tools/issues/1485
        "name": "*** EP: RP2040 Launch CMSIS-DAP",
        "cwd": "${workspaceRoot}",
        "executable": "${workspaceRoot}/build/EP/EP",
        "request": "launch",
        "type": "cortex-debug",
        "servertype": "openocd",
        "gdbPath" : "/opt/arm/arm-none-eabi/13.3.rel1/bin/arm-none-eabi-gdb",
        "device": "RP2040",
        "configFiles": [
            "interface/cmsis-dap.cfg",
            "target/rp2040.cfg"
        ],
        "svdFile": "${env:PICO_SDK_PATH}/src/rp2040/hardware_regs/RP2040.svd",
        "runToEntryPoint": "main",
        // Work around for stopping at main on restart
        "postRestartCommands": [
            "break main",
            "help", "help",
            "continue"
        ],
        // Debug sessions will not start without setting the adaptor speed as below
        "openOCDLaunchCommands": ["adapter speed 5000"],

        // Configure the rtt IO mechanism to let us use printf for debug/status output
        // To see the output stream, select 'RTT Ch:0 console' in the debugger terminal window
        "rttConfig" : {
            "enabled": true,
            "address": "auto",
            "decoders": [
                {
                    "label": "",
                    "port": 0,
                    "polling_interval": 10,
                    "type": "console",
                    "noprompt": true
                }
            ]
        }
    },
    {
        // This config is here until a VSCode/CMake bug is fixed that allows executables to be found in
        // external projects. Right now, the only way to launch a debug session is to specify the location of
        // the executable file explicitly, as below.
        // Info on the bug is here: https://github.com/microsoft/vscode-cmake-tools/issues/1485
        "name": "*** WP: RP2350 Launch CMSIS-DAP",
        "cwd": "${workspaceRoot}",
        "executable": "${workspaceRoot}/build/WP/WP",
        "request": "launch",
        "type": "cortex-debug",
        "servertype": "openocd",
        "gdbPath" : "/opt/arm/arm-none-eabi/13.3.rel1/bin/arm-none-eabi-gdb",
        "device": "RP2350",
        "configFiles": [
            "interface/cmsis-dap.cfg",
            "target/rp2350.cfg"
        ],
        "rtos": "FreeRTOS",
        "svdFile": "${env:PICO_SDK_PATH}/src/rp2350/hardware_regs/RP2350.svd",
        "runToEntryPoint": "main",
        // Work around for stopping at main on restart
        "postRestartCommands": [
            "break main",
            "help", "help",
            "continue"
        ],
        // Debug sessions will not start without setting the adaptor speed as below
        "openOCDLaunchCommands": ["adapter speed 5000"],

        // Configure the rtt IO mechanism to let the WP use printf for debug/status output
        // To see the output stream, select 'RTT Ch:0 console' in the debugger terminal window
        "rttConfig" : {
          "enabled": true,
          "address": "auto",
          "decoders": [
              {
                  "label": "",
                  "port": 0,
                  "polling_interval": 10,
                  "type": "console",
                  "noprompt": true
              }
          ]
        },
        "liveWatch": {
            "enabled": true,
            "samplesPerSecond": 4
        },
    },
    {
        // This config is here until a VSCode/CMake bug is fixed that allows executables to be found in
        // external projects. Right now, the only way to launch a debug session is to specify the location of
        // the executable file explicitly, as below.
        // Info on the bug is here: https://github.com/microsoft/vscode-cmake-tools/issues/1485
        "name": "*** WP: RP2040 Launch CMSIS-DAP",
        "cwd": "${workspaceRoot}",
        "executable": "${workspaceRoot}/build/WP/WP",
        "request": "launch",
        "type": "cortex-debug",
        "servertype": "openocd",
        "gdbPath" : "/opt/arm/arm-none-eabi/13.3.rel1/bin/arm-none-eabi-gdb",
        "device": "RP2040",
        "configFiles": [
            "interface/cmsis-dap.cfg",
            "target/rp2040.cfg"
        ],
        "svdFile": "${env:PICO_SDK_PATH}/src/rp2040/hardware_regs/RP2040.svd",
        "runToEntryPoint": "main",
        // Work around for stopping at main on restart
        "postRestartCommands": [
            "break main",
            "help", "help",
            "continue"
        ],
        // Debug sessions will not start without setting the adaptor speed as below
        "openOCDLaunchCommands": ["adapter speed 5000"],

        // Configure the rtt IO mechanism to let the WP use printf for debug/status output
        // To see the output stream, select 'RTT Ch:0 console' in the debugger terminal window
        "rttConfig" : {
          "enabled": true,
          "address": "auto",
          "decoders": [
              {
                  "label": "",
                  "port": 0,
                  "polling_interval": 10,
                  "type": "console",
                  "noprompt": true
              }
          ]
      }
    },
    {
        "cwd": "${workspaceRoot}",
        "executable": "${command:cmake.launchTargetPath}",
        "name": "Debug with JLink/JLink",
        "request": "launch",
        "type": "cortex-debug",
        "device": "RP2040_M0_0",
        "configFiles": [
            "target/rp2040.cfg"
        ],
        "svdFile": "${env:PICO_SDK_PATH}/src/rp2040/hardware_regs/RP2040.svd",
        "runToEntryPoint": "main",
        "showDevDebugOutput": "none",
        "servertype": "jlink",
        // Need to use WSL path! Specifying the cmdline version helps with getting info
        // in the terminal tab when bad things happen:
        "serverpath": "/mnt/c/Program Files/SEGGER/JLink/JLinkGDBServerCL.exe"
    },
    {
        "cwd": "${workspaceRoot}",
        "executable": "${command:cmake.launchTargetPath}",
        "name": "Debug with JLink/OpenOCD",
        "request": "launch",
        "type": "cortex-debug",
        "showDevDebugOutput": "none",
        "servertype": "jlink",
        "gdbPath" : "arm-none-eabi-gdb",
        "device": "RP2040",
        "configFiles": [
            "interface/picoprobe.cfg",
            "target/rp2040.cfg"
        ],
        "svdFile": "${env:PICO_SDK_PATH}/src/rp2040/hardware_regs/RP2040.svd",
        //"runToMain": true,
        //"runToEntryPoint": "main",
        "runToEntryPoint": "platform_entry",
        // Work around for stopping at main on restart
        "postRestartCommands": [
            "break main",
            "help", "help",
            "continue"
        ],
        "searchDir": ["/home/robin/pico/openocd/tcl"],
    },
    {
        // This is the standard RPi PicoProbe solution
        "name": "PicoProbe Launch",
        "cwd": "${workspaceRoot}",
        "executable": "${command:cmake.launchTargetPath}",
        "request": "launch",
        "type": "cortex-debug",
        "servertype": "openocd",
        "gdbPath" : "arm-none-eabi-gdb",
        "device": "RP2040",
        "configFiles": [
            "interface/picoprobe.cfg",
            "target/rp2040.cfg"
        ],
        "svdFile": "${env:PICO_SDK_PATH}/src/rp2040/hardware_regs/RP2040.svd",
        "runToEntryPoint": "main",
        // Work around for stopping at main on restart
        "postRestartCommands": [
            "break main",
            "help", "help",
            "continue"
        ],
        "searchDir": ["/home/robin/pico/openocd/tcl"],
    },
    {
        // This is the standard RPi PicoProbe solution
        "name": "EP PicoProbe Launch",
        "cwd": "${workspaceRoot}",
        "executable": "${workspaceRoot}/build/EP/EP",
        "request": "launch",
        "type": "cortex-debug",
        "servertype": "openocd",
        "gdbPath" : "/opt/arm/arm-none-eabi/13.3.rel1/bin/arm-none-eabi-gdb",
        "device": "RP2040",
        "configFiles": [
            "interface/picoprobe.cfg",
            "target/rp2040.cfg"
        ],
        "svdFile": "${env:PICO_SDK_PATH}/src/rp2040/hardware_regs/RP2040.svd",
        "runToEntryPoint": "main",
        // Work around for stopping at main on restart
        "postRestartCommands": [
            "break main",
            "help", "help",
            "continue"
        ],
        "searchDir": ["/home/robin/pico/openocd/tcl"],
    },
    {
        // This is the standard (old) RPi PicoProbe solution
        "name": "PicoProbe Attach",
        "cwd": "${workspaceRoot}",
        "executable": "${command:cmake.launchTargetPath}",
        "request": "attach",
        "type": "cortex-debug",
        "servertype": "openocd",
        //"serverpath":"/home/robin/pico/openocd/src/gopenocd.exe",
        // This may need to be arm-none-eabi-gdb depending on your system
        "gdbPath" : "arm-none-eabi-gdb",
        "device": "RP2040",
        "configFiles": [
            "interface/picoprobe.cfg",
            "target/rp2040.cfg"
        ],
        "svdFile": "${env:PICO_SDK_PATH}/src/rp2040/hardware_regs/RP2040.svd",
        "runToEntryPoint": "main",
        // Work around for stopping at main on restart
        "postRestartCommands": [
            "break main",
            "help", "help",
            "continue"
        ],
        "searchDir": ["/home/robin/pico/openocd/tcl"],
    },
    {
        // This is the new CMSIS-DAP RPi PicoProbe solution for launch and attach.
        // Remember: to select the target you want to debug, look for [target-name] on the VS Code status bar.
        // Click the [target-name] and it will give you a choice of things you can debug.
        // After selecting something, F5 will work to start debugging the target you chose.
        "name": "Launch CMSIS-DAP",
        "cwd": "${workspaceRoot}",
        "executable": "${command:cmake.launchTargetPath}",
        "request": "launch",
        "type": "cortex-debug",
        "servertype": "openocd",
        "gdbPath" : "arm-none-eabi-gdb",
        "device": "RP2040",
        "configFiles": [
            "interface/cmsis-dap.cfg",
            "target/rp2040.cfg"
        ],
        "svdFile": "${env:PICO_SDK_PATH}/src/rp2040/hardware_regs/RP2040.svd",
        "runToEntryPoint": "main",
        // Work around for stopping at main on restart
        "postRestartCommands": [
            "break main",
            "help", "help",
            "continue"
        ],
        "searchDir": ["/home/robin/pico/openocd/tcl"],
    },
    {
        "name": "Attach CMSIS-DAP",
        "cwd": "${workspaceRoot}",
        "executable": "${command:cmake.launchTargetPath}",
        "request": "attach",
        "type": "cortex-debug",
        "servertype": "openocd",
        "gdbPath" : "arm-none-eabi-gdb",
        "device": "RP2040",
        "configFiles": [
            "interface/cmsis-dap.cfg",
            "target/rp2040.cfg"
        ],
        "svdFile": "${env:PICO_SDK_PATH}/src/rp2040/hardware_regs/RP2040.svd",
        "runToEntryPoint": "main",
        // Work around for stopping at main on restart
        "postRestartCommands": [
            "break main",
            "help", "help",
            "continue"
        ],
        "searchDir": ["/home/robin/pico/openocd/tcl"],
    },
    {
      // This is the "fast" picoprobe replacement that features a minimal GDB server built into the probe
      // See https://forums.raspberrypi.com/viewtopic.php?p=2036136
      "name": "Fast Pico Debug",
      "cwd": "${workspaceRoot}",
      "executable": "${command:cmake.launchTargetPath}",
      "request": "launch",
      "type": "cortex-debug",
      "servertype": "external",
      "gdbPath" : "arm-none-eabi-gdb",
      "gdbTarget" : "/dev/ttyACM0",
      "device": "RP2040",
      "svdFile": "${env:PICO_SDK_PATH}/src/rp2040/hardware_regs/RP2040.svd",

      //"showDevDebugOutput": "raw",

      // runToEntryPoint causes differences in behavour between launch and reset
      // so best avoided for this use case.
      //"runToEntryPoint": "main",

      // breakAfterReset means it consistantly stops in the reset handler code
      // so we can follow that with some commands to get us to main
      "breakAfterReset": true,

      // get_to_main puts a breakpoint at main, gets there, and then remove is
      // immediately after flashing. This means that by the time any ram based
      // breakpoints are applied the relevant stuff is in RAM.
      "postLaunchCommands": [
          "break main", "continue", "help", "help", "clear main",
      ],
      // With breakAfterReset we have a consistent approach so can use the same
      // commands to get us to main after a restart...
      "postRestartCommands": [
          "break main",
          "continue",
          "help",
          "help",
          "clear main"
      ]
   }
  ]
}